name: Testing Pipeline

on:
  schedule:
    - cron: '0 11 * * *' # Runs every day at 11:00 AM UTC
  # Allows to run workflow on every push or pull made to any of exsisting branches
  push:
  pull_request:
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Run_Nightwatch_tests:
    # Executed these tests on all windows,ubuntu and mac OS.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,windows-latest,macos-latest]
    steps:
    # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Nightwatch Test Started!
        
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21
      - name: npm-install
        run: |
           cd nightwatch-test
           npm ci
      - name: Run Nightwatch tests
        run:  |
           cd nightwatch-test
           npx nightwatch --headless
      - name: Archive test reports
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: nightwatch-report-${{ matrix.os }}
          path: nightwatch-test/tests_output
          
  Run_Selenium_Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
      
    - name: Test Execution
      run: |
        cd Amazon_Test
        mvn clean test
        
    - name: Test Report Generation
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
          name: Amazon Test Report                 # Name of the folder
          path: Amazon_Test/target/surefire-reports/
          
  jmeter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download JMeter
        run: |
          curl -L https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz | tar xz
          export PATH=$PATH:$(pwd)/apache-jmeter-5.4.1/bin

      - name: Run JMeter Tests
        uses: arunpunaroor/jmeter-runner-action@v1
        with:
          # The path to the JMX test file
          testFilePath: jmeter/jmeterTest.jmx 
          # The folder where the JMeter reports will be published
          outputReportsFolder: 'jmeter/result'
      - name: Artifact Test result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: jmeter/result
          
  rest_assured_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
      
    - name: Test Execution
      run: |
        cd rest-assured
        mvn clean test
        
    - name: Test Report Generation
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
          name: Rest Assured Test Report                 # Name of the folder
          path: rest-assured/target/surefire-reports/  

  postman_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '21'

    - name: Install Postman
      run: |
        npm install -g newman
        npm install -g newman-reporter-slackreporter
        npm install -g newman-reporter-htmlextra

    - name: Run Postman tests and Generate Report
      run: |
          cd postman
          newman run "Go Rest.postman_collection.json" -e test.postman_environment.json -r cli,htmlextra --reporter-htmlextra-export testArtifacts/postmanreport.html

    # Upload test reports as artifacts
    - name: Archive test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: postman-test-reports
        path: postman/testArtifacts

  

# Running Nightwatch Test using xvfb which can be used alternatively 
# But not used xvfb as it works on linux only 
   # Run_Nightwatch_Tests:
   #  # The type of runner that the job will run on
   #  runs-on: ${{ matrix.os }}
   #  strategy:
   #    matrix:
   #      os: [ubuntu-latest]
        
   #  # Steps represent a sequence of tasks that will be executed as part of the job
   #  steps:
   #  # Runs a single command using the runners shell
   #    - name: Run a one-line script
   #      run: echo Nightwatch Test Started!
        
   #    - name: Checkout code
   #      uses: actions/checkout@v4
        
   #    - name: Checkout Repository
   #      uses: actions/checkout@v4
   #      with:
   #       #node-version: $undefined
   #       cache: 'npm'
 
   #    - name: Use Node.js
   #      uses: actions/setup-node@v4
   #      with:
   #        node-version: 21
   #    - name: npm-install
   #      run: |
   #         cd nightwatch-test
   #         npm ci
   #    - name: xvfb-install   
   #      run:  |
   #         cd nightwatch-test
   #         sudo apt-get install xvfb
   #    - name: Run Nightwatch tests
   #      run:  |
   #         cd nightwatch-test
   #         xvfb-run --auto-servernum npm test -- --env chrome
